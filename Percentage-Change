# Run on Google Colab
# This algorithm takes in 4 sensor inputs and determines triggering based on change percentage
# "OR" relationship between the sensor inputs is used
# Thresholds were determined based on literature review and real world testing
# Take in temperature, humidity, noise, and heartrate thresholds
temp_percentage_threshold = [-0.1, 0.1]
humidity_percentage_threshold = [-0.02, 0.02]
noise_percentage_threshold = [-0.3, 0.3]
heartrate_percentage_threshold = [-0.02, 0.02]

def change_percentage(value_before, value_after):
  if not value_before:
    return 0

  return (value_after - value_before) / value_before

# Function to decide return value: 0=no music, 1=music
# If any one of the change percentages exceeds the defined percentage threshold, the output is "1"
def is_percentage_change_triggered(last_row, row):
  if last_row is None:
    return 0

  humidity_delta = change_percentage(last_row["humidity"], row["humidity"])
  heartrate_delta = change_percentage(last_row["heartrate"], row["heartrate"])

  # if change_percentage(last_row["temperature"], row["temperature"]) > temp_percentage_threshold:
  #   return 1

  # print("humidity:")
  # print(change_percentage(last_row["humidity"], row["humidity"]))
  # print("heartrate:")
  # print(change_percentage(last_row["heartrate"], row["heartrate"]))

  if (heartrate_delta < heartrate_percentage_threshold[0] or humidity_delta < humidity_percentage_threshold[0]):
    return -1

  if (heartrate_delta > heartrate_percentage_threshold[1] or humidity_delta > humidity_percentage_threshold[1]):
    return 1

  # if change_percentage(last_row["noise"], row["noise"]) > noise_percentage_threshold:
  #   return 1

  return 0


test_df = pd.read_csv("/content/20210220_training - sense1_20210220_095722_waittoturnoff (4).csv")
test_timestamp = test_df.pop("timestamp")

# Smoothing
smoothed_df = pd.DataFrame()
smoothed_df["humidity"] = smoothing(test_df["humidity"])
smoothed_df["heartrate"] = smoothing(test_df["heartrate"])

times = []
for timestamp in test_timestamp:
  element = datetime.datetime.strptime(timestamp, "%Y%m%d_%H%M%S")
  times.append(element)

smoothed_df["timestamp"] = times[0: smoothed_df["humidity"].size]
output_col = []
last_row = None
last_result = -1
for index, row in smoothed_df.iterrows():
  triggered = is_percentage_change_triggered(last_row, row)
  last_row =  row
  if triggered != 0:
    last_result = triggered
  
  output_col.append(last_result * 50 + 50)

smoothed_df["output"] = output_col

import matplotlib.pyplot as plt
import seaborn as sns

fig=plt.figure(figsize=(30, 10), dpi= 200, facecolor='w', edgecolor='k')
sns.set_style("dark")

pd.set_option('display.max_rows', smoothed_df.shape[0]+1)
print(smoothed_df["output"])

# sns.lineplot(x="timestamp", y="temperature", data=test_df, label="temperature", color="blue")
sns.lineplot(x="timestamp", y="humidity", data=smoothed_df, label="humidity", color="darkblue")
# sns.lineplot(x="timestamp", y="noise", data=test_df, label="noise", color="yellow")
sns.lineplot(x="timestamp", y="heartrate", data=smoothed_df, label="heartrate", color="green")
sns.lineplot(x="timestamp", y="output", data=smoothed_df, label="output", color="red")
